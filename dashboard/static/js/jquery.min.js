/* Placeholder for jQuery */
/* In a real implementation, you would include the actual jQuery library */
/* For testing purposes, we'll include a minimal implementation */

window.$ = window.jQuery = (function() {
    function $(selector) {
        if (typeof selector === 'function') {
            document.addEventListener('DOMContentLoaded', selector);
            return;
        }
        
        const elements = document.querySelectorAll(selector);
        
        return {
            each: function(callback) {
                elements.forEach((element, index) => {
                    callback.call(element, index, element);
                });
                return this;
            },
            
            html: function(content) {
                if (content === undefined) {
                    return elements[0] ? elements[0].innerHTML : null;
                }
                
                elements.forEach(element => {
                    element.innerHTML = content;
                });
                
                return this;
            },
            
            text: function(content) {
                if (content === undefined) {
                    return elements[0] ? elements[0].textContent : null;
                }
                
                elements.forEach(element => {
                    element.textContent = content;
                });
                
                return this;
            },
            
            addClass: function(className) {
                elements.forEach(element => {
                    element.classList.add(className);
                });
                
                return this;
            },
            
            removeClass: function(className) {
                elements.forEach(element => {
                    element.classList.remove(className);
                });
                
                return this;
            },
            
            attr: function(name, value) {
                if (value === undefined) {
                    return elements[0] ? elements[0].getAttribute(name) : null;
                }
                
                elements.forEach(element => {
                    element.setAttribute(name, value);
                });
                
                return this;
            },
            
            prop: function(name, value) {
                if (value === undefined) {
                    return elements[0] ? elements[0][name] : null;
                }
                
                elements.forEach(element => {
                    element[name] = value;
                });
                
                return this;
            },
            
            val: function(value) {
                if (value === undefined) {
                    return elements[0] ? elements[0].value : null;
                }
                
                elements.forEach(element => {
                    element.value = value;
                });
                
                return this;
            },
            
            click: function(callback) {
                elements.forEach(element => {
                    element.addEventListener('click', callback);
                });
                
                return this;
            },
            
            submit: function(callback) {
                elements.forEach(element => {
                    element.addEventListener('submit', callback);
                });
                
                return this;
            },
            
            change: function(callback) {
                elements.forEach(element => {
                    element.addEventListener('change', callback);
                });
                
                return this;
            },
            
            off: function(event, callback) {
                elements.forEach(element => {
                    element.removeEventListener(event, callback);
                });
                
                return this;
            },
            
            on: function(event, selector, callback) {
                if (typeof selector === 'function') {
                    callback = selector;
                    selector = null;
                }
                
                elements.forEach(element => {
                    element.addEventListener(event, function(e) {
                        if (selector) {
                            const target = e.target.closest(selector);
                            if (target && element.contains(target)) {
                                callback.call(target, e);
                            }
                        } else {
                            callback.call(element, e);
                        }
                    });
                });
                
                return this;
            },
            
            data: function(key, value) {
                if (value === undefined) {
                    return elements[0] ? elements[0].dataset[key] : null;
                }
                
                elements.forEach(element => {
                    element.dataset[key] = value;
                });
                
                return this;
            },
            
            modal: function(action) {
                elements.forEach(element => {
                    if (action === 'show') {
                        element.style.display = 'block';
                        document.body.classList.add('modal-open');
                    } else if (action === 'hide') {
                        element.style.display = 'none';
                        document.body.classList.remove('modal-open');
                    }
                });
                
                return this;
            },
            
            ajax: function(options) {
                const xhr = new XMLHttpRequest();
                
                xhr.open(options.type || 'GET', options.url);
                
                if (options.headers) {
                    Object.keys(options.headers).forEach(key => {
                        xhr.setRequestHeader(key, options.headers[key]);
                    });
                }
                
                xhr.onload = function() {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        if (options.success) {
                            let response;
                            try {
                                response = JSON.parse(xhr.responseText);
                            } catch (e) {
                                response = xhr.responseText;
                            }
                            options.success(response, xhr.statusText, xhr);
                        }
                    } else {
                        if (options.error) {
                            options.error(xhr, xhr.statusText);
                        }
                    }
                    
                    if (options.complete) {
                        options.complete(xhr, xhr.statusText);
                    }
                };
                
                xhr.onerror = function() {
                    if (options.error) {
                        options.error(xhr, xhr.statusText);
                    }
                    
                    if (options.complete) {
                        options.complete(xhr, xhr.statusText);
                    }
                };
                
                if (options.data) {
                    if (typeof options.data === 'object' && options.contentType !== 'application/x-www-form-urlencoded') {
                        xhr.setRequestHeader('Content-Type', 'application/json');
                        xhr.send(JSON.stringify(options.data));
                    } else {
                        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                        xhr.send(options.data);
                    }
                } else {
                    xhr.send();
                }
            }
        };
    }
    
    $.ajax = function(options) {
        $(document).ajax(options);
    };
    
    return $;
})();
