{
  "name": "vscode-macoder",
  "displayName": "MaCoder",
  "description": "MaCoder VS Code Extension with full sidebar UI",
  "version": "0.4.0-alpha",
  "publisher": "dmac",
  "repository": {
    "type": "git",
    "url": "https://github.com/jluna0413/dmac.git"
  },
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Programming Languages",
    "Machine Learning",
    "Other"
  ],
  "activationEvents": [
    "onView:macoder.chat",
    "onView:macoder.codeGeneration",
    "onView:macoder.brainstorming",
    "onView:macoder.sandbox",
    "onView:macoder.settings",
    "onCommand:macoder.showInfo"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "macoder-sidebar",
          "title": "MaCoder",
          "icon": "media/icons/macoder-icon.svg"
        }
      ]
    },
    "views": {
      "macoder-sidebar": [
        {
          "id": "macoder.chat",
          "name": "Chat",
          "icon": "media/icons/chat-icon.svg",
          "contextualTitle": "MaCoder Chat"
        },
        {
          "id": "macoder.codeGeneration",
          "name": "Code Generation",
          "icon": "media/icons/code-icon.svg",
          "contextualTitle": "Code Generation"
        },
        {
          "id": "macoder.brainstorming",
          "name": "Brainstorming",
          "icon": "media/icons/brainstorm-icon.svg",
          "contextualTitle": "Brainstorming"
        },
        {
          "id": "macoder.sandbox",
          "name": "Sandbox",
          "icon": "media/icons/sandbox-icon.svg",
          "contextualTitle": "Code Sandbox"
        },
        {
          "id": "macoder.settings",
          "name": "Settings",
          "icon": "media/icons/settings-icon.svg",
          "contextualTitle": "MaCoder Settings"
        }
      ]
    },
    "commands": [
      {
        "command": "macoder.startChat",
        "title": "MaCoder: Start Chat"
      },
      {
        "command": "macoder.generateCode",
        "title": "MaCoder: Generate Code"
      },
      {
        "command": "macoder.explainCode",
        "title": "MaCoder: Explain Code"
      },
      {
        "command": "macoder.refactorCode",
        "title": "MaCoder: Refactor Code"
      },
      {
        "command": "macoder.startBrainstorming",
        "title": "MaCoder: Start Brainstorming"
      },
      {
        "command": "macoder.openSandbox",
        "title": "MaCoder: Open Code Sandbox"
      },
      {
        "command": "macoder.openSettings",
        "title": "MaCoder: Open Settings"
      },
      {
        "command": "macoder.showInfo",
        "title": "MaCoder: Show Information"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "macoder.explainCode",
          "group": "macoder",
          "when": "editorHasSelection || editorIsOpen"
        },
        {
          "command": "macoder.refactorCode",
          "group": "macoder",
          "when": "editorHasSelection || editorIsOpen"
        }
      ]
    },
    "configuration": {
      "title": "MaCoder",
      "properties": {
        "macoder.modelProvider": {
          "type": "string",
          "default": "ollama",
          "enum": ["ollama", "openai", "gemini"],
          "enumDescriptions": [
            "Use Ollama for local model inference",
            "Use OpenAI API for cloud-based model inference",
            "Use Google Gemini API for cloud-based model inference"
          ],
          "description": "The model provider to use for MaCoder"
        },
        "macoder.ollamaModel": {
          "type": "string",
          "default": "codellama",
          "description": "The Ollama model to use (e.g., codellama, llama3, deepseek-coder)"
        },
        "macoder.ollamaUrl": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "The URL of the Ollama server"
        },
        "macoder.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "The API key for OpenAI"
        },
        "macoder.openaiModel": {
          "type": "string",
          "default": "gpt-3.5-turbo",
          "description": "The OpenAI model to use (e.g., gpt-3.5-turbo, gpt-4)"
        },
        "macoder.geminiApiKey": {
          "type": "string",
          "default": "",
          "description": "The API key for Google Gemini"
        },
        "macoder.geminiModel": {
          "type": "string",
          "default": "gemini-pro",
          "description": "The Gemini model to use (e.g., gemini-pro, gemini-pro-vision)"
        },
        "macoder.temperature": {
          "type": "number",
          "default": 0.7,
          "minimum": 0,
          "maximum": 1,
          "description": "The temperature to use for model inference (0-1)"
        },
        "macoder.maxTokens": {
          "type": "number",
          "default": 2048,
          "description": "The maximum number of tokens to generate"
        },
        "macoder.contextSize": {
          "type": "number",
          "default": 4096,
          "description": "The maximum context size to use"
        },
        "macoder.enableProjectIndexing": {
          "type": "boolean",
          "default": true,
          "description": "Enable project indexing for better context awareness"
        },
        "macoder.enableCodeVerification": {
          "type": "boolean",
          "default": true,
          "description": "Enable code verification for generated code"
        },
        "macoder.enableSandboxTesting": {
          "type": "boolean",
          "default": true,
          "description": "Enable sandbox testing for generated code"
        },
        "macoder.enableDeepResearch": {
          "type": "boolean",
          "default": false,
          "description": "Enable deep research capabilities"
        },
        "macoder.enableAutonomousMode": {
          "type": "boolean",
          "default": false,
          "description": "Enable autonomous mode for MaCoder"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "^14.14.37",
    "@types/vscode": "^1.60.0",
    "@vscode/test-electron": "^1.5.0",
    "@vscode/vsce": "^2.15.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "typescript": "^4.3.2"
  },
  "dependencies": {
    "axios": "^0.21.1"
  },
  "license": "MIT"
}
